---
- name: Ensure docker-compose is installed
  ansible.builtin.package:
    name: docker-compose-plugin
    state: present
  become: true

- name: Verify service definitions exist
  ansible.builtin.stat:
    path: "{{ repo_path }}/{{ item.path | default(item.name) }}/{{ item.compose_file | default('compose.yml') }}"
  loop: "{{ services }}"
  register: service_files

- name: Fail if any service definition doesn't exist
  ansible.builtin.fail:
    msg: "Service definition {{ item.item.name }} not found at {{ repo_path }}/{{ item.item.path | default(item.item.name) }}/{{ item.item.compose_file | default('compose.yml') }}"
  when: not item.stat.exists
  loop: "{{ service_files.results }}"

- name: Deploy and ensure services are up
  community.docker.docker_compose_v2:
    project_name: "{{ item.name }}"
    definition:
      version: "3"
      pull_policy: always
    files:
      - "{{ repo_path }}/{{ item.path | default(item.name) }}/{{ item.compose_file | default('compose.yml') }}"
    state: present
    env_files: "{{ item.env_files | default([]) }}"
    env: "{{ item.env | default({}) }}"
  loop: "{{ services }}"
  register: compose_result

- name: Wait for services to be healthy
  ansible.builtin.uri:
    url: "{{ item.0.item.health_check_url | default('http://localhost:' + (item.0.item.health_check_port | default('8080'))) }}"
    method: GET
    status_code: 200
    timeout: 5
    validate_certs: false
  register: health_check
  until: health_check.status == 200
  retries: "{{ item.0.item.health_check_retries | default(health_check_retries) }}"
  delay: 10
  loop: "{{ compose_result.results | zip(services) | list }}"
  when:
    - item.0.changed
    - item.1.health_check_enabled | default(true) | bool
